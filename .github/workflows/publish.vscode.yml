# Keeper Security VS Code Extension - Release Workflow
#
# HOW TO PUBLISH A NEW RELEASE:
#
# STEP 1: Update the version in package.json
#   npm version patch  # For bug fixes (1.0.0 -> 1.0.1)
#   npm version minor  # For new features (1.0.0 -> 1.1.0)
#   npm version major  # For breaking changes (1.0.0 -> 2.0.0)
#   # OR manually edit package.json
#
# STEP 2: Commit your changes
#   git add package.json package-lock.json
#   git commit -m "Bump version to 1.0.1"
#   git push origin main  # Push the commit first
#
# STEP 3: Create a git tag matching the version
#   # Get the version from package.json
#   VERSION=$(node -p "require('./package.json').version")
#   
#   # Create annotated tag with message
#   git tag -a "v${VERSION}" -m "Release version ${VERSION}"
#   
#   # OR create a lightweight tag
#   git tag "v${VERSION}"
#
# STEP 4: Push the tag to GitHub (this triggers the workflow)
#   git push origin "v${VERSION}"
#   
#   # OR push all tags at once
#   git push --tags
#
# STEP 5: The workflow will automatically:
#    - Run tests and linting
#    - Build the extension
#    - Generate SBOM
#    - Create a GitHub release with the VSIX file attached
#
# ADDITIONAL TAG MANAGEMENT COMMANDS:
#
# List all tags:
#   git tag -l
#   git tag -l "v*"  # List only version tags
#
# Delete a local tag:
#   git tag -d v1.0.1
#
# Delete a remote tag:
#   git push origin --delete v1.0.1
#
# View tag details:
#   git show v1.0.1
#
# Check out a specific tag:
#   git checkout v1.0.1
#
# Create tag from specific commit:
#   git tag v1.0.1 <commit-hash>
#
# Push a single tag:
#   git push origin v1.0.1
#
# Push all tags:
#   git push --tags
#
# INSTALLATION:
# The VSIX file can be manually installed in VS Code via:
# Extensions view > ... menu > Install from VSIX...
#
# Note: This workflow triggers on version tags (v*.*.*) or manual workflow dispatch

name: Publish VS Code Extension

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.0.1, etc.
    
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test

  build:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Package extension
        run: npm run package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: "*.vsix"
          retention-days: 30

  generate-sbom:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Get the source code
        uses: actions/checkout@v4

      - name: Install Syft
        run: |
          echo "Installing Syft v1.18.1..."
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /tmp/bin v1.18.1
          echo "/tmp/bin" >> $GITHUB_PATH

      - name: Install Manifest CLI
        run: |
          echo "Installing Manifest CLI v0.18.3..."
          curl -sSfL https://raw.githubusercontent.com/manifest-cyber/cli/main/install.sh | sh -s -- -b /tmp/bin v0.18.3

      - name: Create Syft configuration
        run: |
          cat > syft-config.yaml << 'EOF'
          package:
            search:
              scope: all-layers
            cataloger:
              enabled: true
              java:
                enabled: false
              python:
                enabled: false
              nodejs:
                enabled: true
          EOF

      - name: Generate and upload SBOM
        env:
          MANIFEST_API_KEY: ${{ secrets.MANIFEST_TOKEN }}
        run: |
          # Get version from package.json
          echo "Detecting VS Code Extension version..."
          if [ -f "package.json" ]; then
            VERSION=$(grep -o '"version": "[^"]*"' "package.json" | cut -d'"' -f4)
            echo "Detected version: ${VERSION}"
          else
            VERSION="1.0.0"
            echo "Could not detect version, using default: ${VERSION}"
          fi

          echo "Generating SBOM with Manifest CLI..."
          /tmp/bin/manifest sbom "." \
            --generator=syft \
            --name=keeper-vscode-extension \
            --version=${VERSION} \
            --output=spdx-json \
            --file=vscode-extension-sbom.json \
            --api-key=${MANIFEST_API_KEY} \
            --publish=true \
            --asset-label=application,sbom-generated,nodejs,vscode-extension \
            --generator-config=syft-config.yaml

          echo "SBOM generated and uploaded successfully: vscode-extension-sbom.json"
          echo "---------- SBOM Preview (first 20 lines) ----------"
          head -n 20 vscode-extension-sbom.json

  # Marketplace publish job - reserved for future use
  # publish:
  #   runs-on: ubuntu-latest
  #   environment: prod 
  #   needs: [test, build, generate-sbom]
  #
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Use Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.x'
  #         cache: 'npm'
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: extension-build
  #         path: ./
  #
  #     - name: Publish to VS Code Marketplace
  #       run: |
  #         echo "Publishing version $(node -p "require('./package.json').version")..."
  #         npm run publish
  #       env:
  #         VSCE_PAT: ${{ secrets.VSCE_PAT }}

  create-release:
    runs-on: ubuntu-latest
    needs: [test, build, generate-sbom]
    # Only run when triggered by a tag push
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Package extension with version
        run: |
          # Get version from package.json
          VERSION=${{ steps.get_version.outputs.version }}
          echo "Building version: ${VERSION}"
          
          # Create VSIX package with version in filename
          npx vsce package --out "keeper-vscode-extension-${VERSION}.vsix"
          
          # List the created file
          echo "Created package:"
          ls -la *.vsix

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Keeper Security VS Code Extension ${{ github.ref_name }}
            
            ### Installation
            
            #### Manual Installation (VSIX):
            1. Download the `keeper-vscode-extension-${{ steps.get_version.outputs.version }}.vsix` file from the assets below
            2. Open VS Code
            3. Open Command Palette (Ctrl+Shift+P or Cmd+Shift+P)
            4. Type "Install from VSIX" and select "Extensions: Install from VSIX..."
            5. Choose the downloaded VSIX file
            
            #### Alternative Method:
            1. Download the VSIX file
            2. Open Extensions view (Ctrl+Shift+X or Cmd+Shift+X)
            3. Click the "..." menu at the top of the Extensions view
            4. Select "Install from VSIX..."
            5. Select the downloaded file
            
            ### What's Changed
            See the [full changelog](https://github.com/Keeper-Security/keeper-vscode-extension/compare/previous-tag...${{ github.ref_name }})
          draft: false
          prerelease: false

      - name: Upload VSIX to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./keeper-vscode-extension-${{ steps.get_version.outputs.version }}.vsix
          asset_name: keeper-vscode-extension-${{ steps.get_version.outputs.version }}.vsix
          asset_content_type: application/vsix
